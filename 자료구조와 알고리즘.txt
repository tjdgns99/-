프로그램 - 자료구조 + 알고리즘
자료구조 - 추상 데이터 타입을 프로그래밍 언어로 구현한 것
	스택
	큐
	리스트
	사전, 탐색구조
	그래프
	트리
알고리즘 - 자료구조를 처리하는 절차
	입력: 0개 이상의 입력이 존재
	출력: 1개 이상의 출력이 존재
	명백성: 각 명령어의 의미는 명확해야한다.
	유한성: 한정된 수의 단계 후에는 반드시 종료되어야 한다.
	유효성: 각 명령어들은 실행 가능한 연산이어야한다.

알고리즘을 기술하기 위한 방법
	자연어
	흐름도
	유사코드
	프로그래밍 언어

데이터 - 처리의 대상이 되는 모든 것
데이터 타입 - 데이터의 집합(객체)과 이러한 데이터에 적용할 수 있는 연산의 집합

추상 데이터 타입 - 새로운 데이터 타입을 추상적으로 정의한 것(구현으로부터의 명세의 분리)
	사용자는 추상 데이터 타입이 제공하는 연산만을 사용 가능
	사용자는 추상 데이터 타입이 제공하는 연산의 명세 이해 필요(연산의 사용법)
	사용자는 추상 데이터 타입의 내부 데이터 접근 불가

정보 은닉 기법(information hiding)(구현으로부터의 명세의 분리)
	전체 프로그램을 변경 가능성이 있는 구현의 세부 사항으로부터 보호하는 것

C언어: 구조체를 이용하여 구현 가능
객체지향언어(JAVA/C++): 클래스를 사용하여 구현 가능(private/protected 키워드를 이용하여 내부 접근 제한 가능)
	추상 데이터 타입의 객체 -> 클래스의 멤버변수
	추상 데이터 타입의 연산 -> 클래스의 멤버함수

알고리즘의 성능 분석
	시간 복잡도(time complexity) - 알고리즘의 실행 시간 분석
	공간 복잡도(space complexity) - 알고리즘이 사용하는 기억 공간 분석

빅오 표기법 - 시간 복잡도(time complexity)에서 불필요한 정보를 제거하여 알고리즘 분석을 쉽게 할 목적으로 시간 복잡도를 표시하는 방법
	1_log n_n_nlog n_n^2_n^3_2^n_n!
	O(1): 상수형
	O(log n): 로그형
	O(n): 선형
	O(nlog n): 선형 로그형
	O(n^2): 2차형
	O(n^3): 3차형
	O(2^n): 지수형
	O(n!): 팩토리얼형
시간복잡도	1	2	4	8	16		32
1		1	1	1	1	1		1
log n		0	1	2	3	4		5
n		1	2	4	8	16		32
nlog n		0	2	8	24	64		160
n^2		1	4	16	64	256		1024
n^3		1	8	64	512	4096		32768
2^n		2	4	16	256	65536		4294967296
n!		1	2	24	40326	20922789888000	26313 X 10^33
빅오 - 상한을 표기
빅오메가 - 하한을 표기
빅세타 - 동일 함수로 상한/하한을 만들 수 있는 경우

알고리즘의 효율성
	최악의 경우(Worst case) - 가장 오래	1
	평균적인 경우(Average case) - 평균	2
	최선의 경우(Best case) - 가장 짧게	3

자료구조 표기법
이름 짓기
	상수: #define MAX_ELEMENTS 100
	변수의 이름: int increment;
	함수의 이름: int add(ListNode *node)
	typedef의 사용: typedef <타입의 정의> <타입 이름>
		typedef int element;
		typedef struct ListNode{
			element data;
			struct ListNode *link;
		} ListNode;




















	